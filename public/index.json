[{"content":"These days I\u0026rsquo;ve been working on a DIY built-in bookcase on top of a cabinet for our home office which I share with my wife.\nOf course when you start a DIY project you first need to get a bunch of tools to be able to build stuff. Therefore, I started researching the minimal setup required for this type of job. Watched several youtube videos, read some very detailed blog posts etc.\nI realized that the first thing I need to do before buying tools is to draw and plan what I really need to build. Hence, I learned how to draw woodworking projects in Sketchup.\nI finally finished my first Sketchup draft that I\u0026rsquo;ll be sharing in here. I will also post the step-by-step guide how I got to the finish line. Stay tuned !\n","permalink":"https://www.lvnt.be/posts/a-new-hobby-to-attach/","summary":"These days I\u0026rsquo;ve been working on a DIY built-in bookcase on top of a cabinet for our home office which I share with my wife.\nOf course when you start a DIY project you first need to get a bunch of tools to be able to build stuff. Therefore, I started researching the minimal setup required for this type of job. Watched several youtube videos, read some very detailed blog posts etc.","title":"A New Hobby to Attach"},{"content":"A cross-platform method to construct a development environment for developing C++ applications by using several tools such as :\n Eclipse (IDE) GNU GCC (Compiler) GNU Binutils (only for Linux) CMake (only for Windows) GNU GDB (Debugger with Python support) JDK (Java Runtime) Python (To run scripts and required by SCons) SCons (Build system) Boost (Advanced C++ libraries)  First of all create a folder named as devenv at any location.\nUbuntu 18.04 Eclipse Download Eclipse IDE for C/C++ Developers from https://www.eclipse.org/downloads/packages/ for Linux 64-bit\nExtract compressed .tar.gz file into devenv/eclipse folder\nGNU GCC git clone https://github.com/gcc-mirror/gcc at a temporary location\nThen follow the commands below\nsudo apt-get install build-essential sudo apt-get install libc6-dev sudo apt-get install lib32z1 sudo apt-get install flex sudo apt-get install bison sudo apt-get install gcc-multilib #assuming you are at your temp location (such as Downloads) cd gcc ./contrib/download_prerequisites mkdir objdir cd objdir ../configure --enable-multilib --disable-werror --prefix=/home/devenv/gcc-10.0.1 make -j4 BOOT_CFLAGS=\u0026#39;-O\u0026#39; bootstrap make install-strip GNU Binutils Download latest compressed source file from https://ftp.gnu.org/gnu/binutils/\nExtract compressed .tar into some temp location\nsudo apt-get install texinfo cd binutils-2.34 mkdir build cd build ../configure --prefix=/home/devenv/binutils-2.34 make -j4 make install GNU GDB  Before start compiling GDB with Python support, please Compile \u0026amp; Install Python first\n Download latest source files from http://ftp.gnu.org/gnu/gdb/\nExtract compressed .tar file into some temporary location (for only building purposes, source files of gdb will not be a part of our development environment)\n\u0026ndash;enable-static=yes is essential since it requires Python to be found in exactly given location in the case of moving GDB directory somewhere else or changing Python directory.\nexport PATH=/home/devenv/Python3.8/bin:$PATH #Based on https://stackoverflow.com/a/37077248/1693073 export LDFLAGS=-L/home/devenv/Python3.8/lib; mkdir devenv/gdb-9.1 cd into your temporary gdb source folder mkdir build cd build ../configure --with-python --enable-static=yes --prefix=/home/devenv/gdb-9.1 make -j4 make install Pretty-Print for GDB Install subversion\nsudo apt-get install subversion\nCheckout related packages to enable pretty printing in GDB\ncd /home/devenv/gdb-9.1 svn co https://gcc.gnu.org/svn/gcc/trunk/libstdc++-v3/python touch .gdbinit Open .gdbinit file and copy the following contents\npython import sys, os sys.path.insert(0, os.getenv(\u0026#39;GDB_LOC\u0026#39;) + \u0026#39;/python\u0026#39;) from libstdcxx.v6.printers import register_libstdcxx_printers register_libstdcxx_printers (None) end set print pretty on set print object on set print static-members on set print vtbl on set print demangle on set demangle-style gnu-v3 set print sevenbit-strings off os.getenv('GDB_LOC') gets GDB_LOC environment variable which we will set before opening eclipse, thus it will be able to fetch the GDB location\nJDK Download Linux Compressed Archive from https://www.oracle.com/java/technologies/javase-jdk13-downloads.html\nmkdir devenv/jdk-13.0.2\nExtract downloaded compressed jdk into devenv/jdk-x.x.x folder.\nPython Download latest linux source files from https://www.python.org/downloads/\nExtract downloded compressed file into some temporary location (This will also be compiled)\nmkdir devenv/Python3.8 cd into temporary python source folder ./configure --prefix=/home/devenv/Python3.8 make -j4 make install SCons Download latest source files from https://scons.org/pages/download.html\nExtract downloaded compressed file into some temporary location (Will be compiled)\ncd devenv/Python3.8/bin #/home/Downloads/scons-3.1.2 is your temporary location ./python /home/Downloads/scons-3.1.2/setup.py install Boost Download latest compressed source file from under https://dl.bintray.com/boostorg/release\nExtract downlodad compressed file into some temp location (Will be compiled)\nmkdir devenv/boost_1_72_0 cd into your temp source location sh bootstrap.sh ./b2 install --prefix=/home/devenv/boost_1_72_0 Windows 10 Eclipse Download Eclipse IDE for C/C++ Developers from https://www.eclipse.org/downloads/packages/ for Windows 64-bit\nExtract compressed .zip file into devenv\\eclipse folder\nGNU GCC Download MinGW Installation Manager (mingw-get) from https://osdn.net/projects/mingw/releases/\nRun mingw-get\nSelect destination folder location as devenv\\MinGW\nCheck all Basic Setup packages (gcc-fortran-bin and gcc-ada-bin are not necessary for us, you can uncheck them)\nFrom All Packages screen, uncheck mingw32-gdb-bin and all related gdb packages since we will be installing our own GDB which is the latest one that supports pretty-print with python scripting for C++ STL objects.\nInstall and exit.\nCMake It is required to build some programs so it is better to have it inside development environment.\nDownload Windows win64-x64 ZIP(Binary distributions) from https://cmake.org/download/\nExtract zip into devenv\nPython Download Windows x86 embeddable zip file from https://www.python.org/downloads/windows/\nExtract it into devenv\\Python38-32\nSCons Download latest source files from https://scons.org/pages/download.html\nExtract downloaded compressed file into some temporary location (Will be compiled)\ncd devenv\\Python38-32 #C:\\Downloads\\scons-3.1.2 is your temporary location python.exe C:\\Downloads\\scons-3.1.2\\setup.py install GNU GDB Download latest source files from http://ftp.gnu.org/gnu/gdb/\nExtract compressed .tar file into devenv\\MinGW\\msys\\1.0\\home\\user\\gdb-9.1\nOpen devenv\\MinGW\\msys\\1.0\\msys.bat\n#assuming devenv at D:\\devenv export PATH=\u0026#34;/D/devenv/MinGW/bin:/D/devenv/MinGW/msys/1.0/bin:/D/devenv/Python38-32:/D/devenv/cmake-3.17.0-rc1-win64-x64/bin\u0026#34; mkdir gdb_export cd gdb-9.1 mkdir build cd build ../configure --prefix=/home/user/gdb_export make -j4 make install Copy the contents of gdb_export folder into devenv\\gdb-9.1\nPretty-Print for GDB Download and Install subversion from https://tortoisesvn.net/downloads.html\nCheckout related packages to enable pretty printing in GDB\ncd D:\\devenv\\gdb-9.1 svn co https://gcc.gnu.org/svn/gcc/trunk/libstdc++-v3/python Create a file inside devenv/gdb-9.1 folder named as .gdbinit (It can be done through NotePad++)\nOpen .gdbinit file and copy the following contents\npython import sys, os sys.path.insert(0, os.getenv(\u0026#39;GDB_LOC\u0026#39;) + \u0026#39;\\\\python\u0026#39;) from libstdcxx.v6.printers import register_libstdcxx_printers register_libstdcxx_printers (None) end set print pretty on set print object on set print static-members on set print vtbl on set print demangle on set demangle-style gnu-v3 set print sevenbit-strings off os.getenv('GDB_LOC') gets GDB_LOC environment variable which we will set before opening eclipse, thus it will be able to fetch the GDB location\nJDK Download Windows x64 Compressed Archive from https://www.oracle.com/java/technologies/javase-jdk13-downloads.html\nExtract downloaded compressed jdk into devenv/jdk-x.x.x folder.\nBoost  As the time of this writing, there is a reported issue when trying to compile Boost 1.72 with MinGW as mentioned here and here. So it is better to Download Boost 1.70 sources for Windows with MinGW.\n Download latest compressed source file from under https://dl.bintray.com/boostorg/release\nExtract downlodad compressed file into some temp location (Will be compiled)\nOpen cmd.exe\n#Clear the PATH variable set PATH= set PATH=D:\\devenv\\jdk-13.0.2;D:\\devenv\\MinGW\\bin;D:\\devenv\\MinGW\\msys\\1.0\\bin;D:\\devenv\\Python38-32;D:\\devenv\\cmake-3.17.0-rc1-win64-x64;%SYSTEMROOT%;%SYSTEMROOT%\\system32 cd into your temp source location bootstrap.bat gcc b2 install --prefix=\u0026#34;D:\\devenv\\boost_1_72_0\u0026#34; Shell Script asdasd\nEclipse  Install PyDev from marketplace Configure Python interpreter (manual unfortunatelly) From Debug Configurations, select .gdbinit (manual unfortunatelly)  ","permalink":"https://www.lvnt.be/posts/portable-dev-env-for-c/","summary":"A cross-platform method to construct a development environment for developing C++ applications by using several tools such as :\n Eclipse (IDE) GNU GCC (Compiler) GNU Binutils (only for Linux) CMake (only for Windows) GNU GDB (Debugger with Python support) JDK (Java Runtime) Python (To run scripts and required by SCons) SCons (Build system) Boost (Advanced C++ libraries)  First of all create a folder named as devenv at any location.","title":"Portable Dev Env for C++"},{"content":"Hello all,\nThis is the traditional initial post for my blog.\nThis blog is created by Hugo framework which is a static website builder. Furthermore, the files of this blog is open-source and hosted in my Github repo and deployed with Netlify.\n","permalink":"https://www.lvnt.be/posts/hello-world/","summary":"Hello all,\nThis is the traditional initial post for my blog.\nThis blog is created by Hugo framework which is a static website builder. Furthermore, the files of this blog is open-source and hosted in my Github repo and deployed with Netlify.","title":"Hello World"},{"content":"[/posts/hello-world](Hello World) [/posts/my-hackintosh-journey](My Hackintosh Journey !) [/posts/portable-dev-env-for-c](Portable Dev Env for C++) [/posts/a-new-hobby-to-attach](A New Hobby to Attach)\n","permalink":"https://www.lvnt.be/posts/articles/","summary":"[/posts/hello-world](Hello World) [/posts/my-hackintosh-journey](My Hackintosh Journey !) [/posts/portable-dev-env-for-c](Portable Dev Env for C++) [/posts/a-new-hobby-to-attach](A New Hobby to Attach)","title":"Articles"},{"content":"A hackintosh journey of me in order to join the elegant \u0026ldquo;just working\u0026rdquo; environment of Apple by a more budget-friendly way.\nThe term \u0026ldquo;hackintosh\u0026rdquo; has been around since Apple has switched from PowerPC to Intel architecture around 2005. Ever since then, hackers try to integrate macOS/OS X software to be run on custom made platforms. There is a huge community behind this struggle such as tonymacx86, insanelymac and of course /r/hackintosh sub-reddit. Personally, I\u0026rsquo;m not an active contributor of any of these communities. Therefore, my experience and insights about this topic are very limited. More historic info can be found in here.\nMac OS X running on Pentium 4\nSo, how my journey started in the first place and most importantly why I wanted to switch from mighty Windows to macOS ?\nI want to start with the question why I switched from Windows to Mac. Well, I can list a number of reasons in here. However, I think the most important one is the elegance and minimalism of Apple products thoroughly.\nI\u0026rsquo;ve been a long-term PC users for almost 22 years and I always liked the idea of flexibility on every platform I use. However, the huge number of options and alternative ways that are provided to increase our so-called productivity and pleasure started to annoy me recently. There are just too many online services, text editors, presentation preparation tools, file explorers, design tools etc. and most importantly, those are not synched to each other. They offer just too many features which the majority of us do not even need. I think this \u0026ldquo;all-in-one\u0026rdquo; type of approach while designing a product is getting older and should immediately be abandoned. Long story short, I love how Apple deals with this issue by enforcing and limiting you in order to keep your focus on what you do instead of trying all the alternative ways which eventually turns into a comparison journey of the tools or configurations. I also like how it renders the look in an elegant way. I think that\u0026rsquo;s enough of the unnecessary polish in here.\nThe answer of how I started my hackintosh journey in the first place is when I was in the college around 2012-2013. Back then, I had a custom built AMD-based PC and it was not that possible to run macOS properly on an AMD-based PC. I also had a Dell N4050 laptop with Core i5 - 2450m, 4GB DDR3 and Radeon HD 6470M / Intel HD3000 switchable graphics cards.\nTherefore, my laptop was the best candidate to play around with hackintosh. As far as I remember, I was successfully installed an OSX version and everything was working as expected. However, I didn\u0026rsquo;t like its performance and did not have much time to tweak that so I switched back to Windows desperately.\nYears passed and finally I had both money and time to invest on to a custom-built PC. This time, I was going to pick the parts which fits best for a hackintosh build and I also wanted to build a mini case which also seems elegant from the outside. (It also needed to be budget-friendly).\nSome of the parts that I chose are given below:\nRendeRenderCollectionViewrCode NYI\nThe most distinguishing parts are Motherboard, CPU and GPU for a hackintosh build. Of course, wifi/bt cards or dongles are also important to be compatible.\nThere are dozens of sources on the Internet about hackintosh, but I personally found tonymacx86 is the best one to consider. More importantly, they have the biggest community to get help which is the most important aspect while messing with hackintosh.\nFrom my perspective, hackintosh = community\nI wanted my OSX to run as bare as possible without touching or modifying anything inside the OS. However, my journey thought me that I needed to get my hands dirty no matter how \u0026ldquo;compatible\u0026rdquo; I chose my parts are. As I mentioned earlier, my main and only source was tonymacx86.\nFirstly, I started with this topic → https://www.tonymacx86.com/threads/unibeast-install-macos-catalina-on-any-supported-intel-based-pc.285366/\n","permalink":"https://www.lvnt.be/posts/my-hackintosh-journey/","summary":"A hackintosh journey of me in order to join the elegant \u0026ldquo;just working\u0026rdquo; environment of Apple by a more budget-friendly way.\nThe term \u0026ldquo;hackintosh\u0026rdquo; has been around since Apple has switched from PowerPC to Intel architecture around 2005. Ever since then, hackers try to integrate macOS/OS X software to be run on custom made platforms. There is a huge community behind this struggle such as tonymacx86, insanelymac and of course /r/hackintosh sub-reddit.","title":"My Hackintosh Journey !"},{"content":"About Me  I\u0026rsquo;m a lone coder in my daily life and a software engineer in my professional life\n Development Skills go, apple, c, cplusplus, git, linux, ubuntu, visualstudio\nLanguage Proficiency English - Professional Working Proficiency\nEducation  Eskisehir Osmangazi University - Electrical and Electronics Engineering (BSc) Middle East Technical University - Electrical and Electronics Engineering (MSc)  ","permalink":"https://www.lvnt.be/about/","summary":"About Me  I\u0026rsquo;m a lone coder in my daily life and a software engineer in my professional life\n Development Skills go, apple, c, cplusplus, git, linux, ubuntu, visualstudio\nLanguage Proficiency English - Professional Working Proficiency\nEducation  Eskisehir Osmangazi University - Electrical and Electronics Engineering (BSc) Middle East Technical University - Electrical and Electronics Engineering (MSc)  ","title":"About"}]